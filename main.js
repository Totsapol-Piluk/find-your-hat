// Please copy and paste your GitHub Repo on line 2 (optional)
// <GitHub Repo>

// JavaScript Assessment Rubric: https://generation.instructure.com/courses/2342/assignments/143783

// Codecademy: https://www.codecademy.com/paths/front-end-engineer-career-path/tracks/fecp-javascript-syntax-part-iii/modules/fecp-challenge-project-find-your-hat/projects/find-your-hat

// Please break down your thinking process step-by-step (mandatory)
const prompt = require('prompt-sync')({ sigint: true });
const clear = require('clear-screen');

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ï‡πà‡∏≤‡∏á‡πÜ‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤
const ground = 'üå¥';
const hat = 'üíß';
const hole = 'üë∫';
const actor = 'üëª';
let field = [];

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏°
const fieldGenerate = () => {
  clear();
  const arr = Array.from({ length: 10 }, () => Array.from({ length: 10 }, () => ground));
  return arr;
}
field = fieldGenerate(); /* ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏ä‡∏±‡πà‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏¥‡∏• */

// ‡πÅ‡∏™‡∏î‡∏á map ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
const print = () => {
  clear();
  console.log(field.map(member => member.join('')).join('\n'));
}

// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ
const randomPosition = () => {
  return Math.floor(Math.random() * field.length);
}

// ‡∏ó‡∏≥ action ‡∏ï‡πà‡∏≤‡∏á‡πÜ
const moveRight = () => {
  check(randomX, randomY);
  field[randomX][randomY] = actor;
}
const moveLeft = () => {
  check(randomX, randomY);
  field[randomX][randomY] = actor;
}
const moveUp = () => {
  check(randomX, randomY);
  field[randomX][randomY] = actor;
}
const moveDown = () => {
  check(randomX, randomY);
  field[randomX][randomY] = actor;
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡∏ó‡∏≥ action ‡∏ï‡πà‡∏≤‡∏á‡πÜ
const action = () => {
  const input = prompt('Enter your way ( w(‚Üë) , a(‚Üê) , s(‚Üì) , d(‚Üí) ) : ');
  (input.toUpperCase() === 'W') ? (randomX -= 1, moveUp()) :
    (input.toUpperCase() === 'A') ? (randomY -= 1, moveLeft()) :
      (input.toUpperCase() === 'S') ? (randomX += 1, moveDown()) :
        (input.toUpperCase() === 'D') ? (randomY += 1, moveRight()) : null;
}

// set ‡∏Ñ‡πà‡∏≤ position ‡∏Ç‡∏≠‡∏á hole
for (let index = 0; index < 22; index++) {
  const randomX = randomPosition();
  const randomY = randomPosition();
  field[randomX][randomY] = hole;

}
// set hat position
const hatPositionX = randomPosition();
const hatPositionY = randomPosition();
field[hatPositionX][hatPositionY] = hat;

// set ‡∏Ñ‡πà‡∏≤ position ‡∏Ç‡∏≠‡∏á actor
let randomX = randomPosition();
let randomY = randomPosition();
field[randomX][randomY] = actor; /* ‡πÄ‡∏ã‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á actor */

// check ‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡∏´‡∏•‡∏∏‡∏î‡πÅ‡∏°‡∏û‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏Å‡∏´‡∏•‡∏∏‡∏°‡πÑ‡∏´‡∏°
const check = (x, y) => {
  (field[x][y] === hat) ? (console.log('You win!'), playing = false) :
    (field[x][y] === hole) ? (console.log('You fell into a hole!'), playing = false) :
      (x >= field.length || x < 0 || y >= field[0].length || y < 0) ? (console.log('You fallen off the map.'), playing = false) :
        null;
  return playing;
}

//‡∏ß‡∏ô loop ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏°‡∏à‡∏∞‡∏à‡∏ö
let playing = true;
while (playing === true) {
  print();  /*‡πÅ‡∏™‡∏î‡∏á map ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô*/
  action();  /* ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ input ‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏ô‡∏≥‡πÑ‡∏õ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ï‡πà‡∏≤‡∏á‡πÜ */
}
